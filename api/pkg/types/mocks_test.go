// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package types

import (
	"database/sql/driver"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAnswer creates a new instance of MockAnswer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnswer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnswer {
	mock := &MockAnswer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAnswer is an autogenerated mock type for the Answer type
type MockAnswer struct {
	mock.Mock
}

type MockAnswer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnswer) EXPECT() *MockAnswer_Expecter {
	return &MockAnswer_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function for the type MockAnswer
func (_mock *MockAnswer) Validate(q Question) error {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Question) error); ok {
		r0 = returnFunc(q)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAnswer_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockAnswer_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - q Question
func (_e *MockAnswer_Expecter) Validate(q interface{}) *MockAnswer_Validate_Call {
	return &MockAnswer_Validate_Call{Call: _e.mock.On("Validate", q)}
}

func (_c *MockAnswer_Validate_Call) Run(run func(q Question)) *MockAnswer_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Question
		if args[0] != nil {
			arg0 = args[0].(Question)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnswer_Validate_Call) Return(err error) *MockAnswer_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAnswer_Validate_Call) RunAndReturn(run func(q Question) error) *MockAnswer_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockAnswer
func (_mock *MockAnswer) Value() (driver.Value, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 driver.Value
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (driver.Value, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() driver.Value); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAnswer_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockAnswer_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockAnswer_Expecter) Value() *MockAnswer_Value_Call {
	return &MockAnswer_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockAnswer_Value_Call) Run(run func()) *MockAnswer_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAnswer_Value_Call) Return(value driver.Value, err error) *MockAnswer_Value_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockAnswer_Value_Call) RunAndReturn(run func() (driver.Value, error)) *MockAnswer_Value_Call {
	_c.Call.Return(run)
	return _c
}
