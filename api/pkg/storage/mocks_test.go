// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"github.com/plutov/formulosity/api/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockInterface
func (_mock *MockInterface) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Close() *MockInterface_Close_Call {
	return &MockInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockInterface_Close_Call) Run(run func()) *MockInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Close_Call) Return(err error) *MockInterface_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_Close_Call) RunAndReturn(run func() error) *MockInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSurvey provides a mock function for the type MockInterface
func (_mock *MockInterface) CreateSurvey(survey *types.Survey) error {
	ret := _mock.Called(survey)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurvey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Survey) error); ok {
		r0 = returnFunc(survey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_CreateSurvey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSurvey'
type MockInterface_CreateSurvey_Call struct {
	*mock.Call
}

// CreateSurvey is a helper method to define mock.On call
//   - survey *types.Survey
func (_e *MockInterface_Expecter) CreateSurvey(survey interface{}) *MockInterface_CreateSurvey_Call {
	return &MockInterface_CreateSurvey_Call{Call: _e.mock.On("CreateSurvey", survey)}
}

func (_c *MockInterface_CreateSurvey_Call) Run(run func(survey *types.Survey)) *MockInterface_CreateSurvey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Survey
		if args[0] != nil {
			arg0 = args[0].(*types.Survey)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_CreateSurvey_Call) Return(err error) *MockInterface_CreateSurvey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_CreateSurvey_Call) RunAndReturn(run func(survey *types.Survey) error) *MockInterface_CreateSurvey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSurveySession provides a mock function for the type MockInterface
func (_mock *MockInterface) CreateSurveySession(session *types.SurveySession) error {
	ret := _mock.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSurveySession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.SurveySession) error); ok {
		r0 = returnFunc(session)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_CreateSurveySession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSurveySession'
type MockInterface_CreateSurveySession_Call struct {
	*mock.Call
}

// CreateSurveySession is a helper method to define mock.On call
//   - session *types.SurveySession
func (_e *MockInterface_Expecter) CreateSurveySession(session interface{}) *MockInterface_CreateSurveySession_Call {
	return &MockInterface_CreateSurveySession_Call{Call: _e.mock.On("CreateSurveySession", session)}
}

func (_c *MockInterface_CreateSurveySession_Call) Run(run func(session *types.SurveySession)) *MockInterface_CreateSurveySession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.SurveySession
		if args[0] != nil {
			arg0 = args[0].(*types.SurveySession)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_CreateSurveySession_Call) Return(err error) *MockInterface_CreateSurveySession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_CreateSurveySession_Call) RunAndReturn(run func(session *types.SurveySession) error) *MockInterface_CreateSurveySession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSurveySession provides a mock function for the type MockInterface
func (_mock *MockInterface) DeleteSurveySession(sessionUUID string) error {
	ret := _mock.Called(sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSurveySession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(sessionUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_DeleteSurveySession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSurveySession'
type MockInterface_DeleteSurveySession_Call struct {
	*mock.Call
}

// DeleteSurveySession is a helper method to define mock.On call
//   - sessionUUID string
func (_e *MockInterface_Expecter) DeleteSurveySession(sessionUUID interface{}) *MockInterface_DeleteSurveySession_Call {
	return &MockInterface_DeleteSurveySession_Call{Call: _e.mock.On("DeleteSurveySession", sessionUUID)}
}

func (_c *MockInterface_DeleteSurveySession_Call) Run(run func(sessionUUID string)) *MockInterface_DeleteSurveySession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_DeleteSurveySession_Call) Return(err error) *MockInterface_DeleteSurveySession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_DeleteSurveySession_Call) RunAndReturn(run func(sessionUUID string) error) *MockInterface_DeleteSurveySession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSurveyByField provides a mock function for the type MockInterface
func (_mock *MockInterface) GetSurveyByField(field string, value interface{}) (*types.Survey, error) {
	ret := _mock.Called(field, value)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveyByField")
	}

	var r0 *types.Survey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) (*types.Survey, error)); ok {
		return returnFunc(field, value)
	}
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) *types.Survey); ok {
		r0 = returnFunc(field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Survey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = returnFunc(field, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_GetSurveyByField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSurveyByField'
type MockInterface_GetSurveyByField_Call struct {
	*mock.Call
}

// GetSurveyByField is a helper method to define mock.On call
//   - field string
//   - value interface{}
func (_e *MockInterface_Expecter) GetSurveyByField(field interface{}, value interface{}) *MockInterface_GetSurveyByField_Call {
	return &MockInterface_GetSurveyByField_Call{Call: _e.mock.On("GetSurveyByField", field, value)}
}

func (_c *MockInterface_GetSurveyByField_Call) Run(run func(field string, value interface{})) *MockInterface_GetSurveyByField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_GetSurveyByField_Call) Return(survey *types.Survey, err error) *MockInterface_GetSurveyByField_Call {
	_c.Call.Return(survey, err)
	return _c
}

func (_c *MockInterface_GetSurveyByField_Call) RunAndReturn(run func(field string, value interface{}) (*types.Survey, error)) *MockInterface_GetSurveyByField_Call {
	_c.Call.Return(run)
	return _c
}

// GetSurveyQuestions provides a mock function for the type MockInterface
func (_mock *MockInterface) GetSurveyQuestions(surveyID int64) ([]types.Question, error) {
	ret := _mock.Called(surveyID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveyQuestions")
	}

	var r0 []types.Question
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) ([]types.Question, error)); ok {
		return returnFunc(surveyID)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) []types.Question); ok {
		r0 = returnFunc(surveyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Question)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(surveyID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_GetSurveyQuestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSurveyQuestions'
type MockInterface_GetSurveyQuestions_Call struct {
	*mock.Call
}

// GetSurveyQuestions is a helper method to define mock.On call
//   - surveyID int64
func (_e *MockInterface_Expecter) GetSurveyQuestions(surveyID interface{}) *MockInterface_GetSurveyQuestions_Call {
	return &MockInterface_GetSurveyQuestions_Call{Call: _e.mock.On("GetSurveyQuestions", surveyID)}
}

func (_c *MockInterface_GetSurveyQuestions_Call) Run(run func(surveyID int64)) *MockInterface_GetSurveyQuestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_GetSurveyQuestions_Call) Return(questions []types.Question, err error) *MockInterface_GetSurveyQuestions_Call {
	_c.Call.Return(questions, err)
	return _c
}

func (_c *MockInterface_GetSurveyQuestions_Call) RunAndReturn(run func(surveyID int64) ([]types.Question, error)) *MockInterface_GetSurveyQuestions_Call {
	_c.Call.Return(run)
	return _c
}

// GetSurveySession provides a mock function for the type MockInterface
func (_mock *MockInterface) GetSurveySession(surveyUUID string, sessionUUID string) (*types.SurveySession, error) {
	ret := _mock.Called(surveyUUID, sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySession")
	}

	var r0 *types.SurveySession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*types.SurveySession, error)); ok {
		return returnFunc(surveyUUID, sessionUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *types.SurveySession); ok {
		r0 = returnFunc(surveyUUID, sessionUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SurveySession)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(surveyUUID, sessionUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_GetSurveySession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSurveySession'
type MockInterface_GetSurveySession_Call struct {
	*mock.Call
}

// GetSurveySession is a helper method to define mock.On call
//   - surveyUUID string
//   - sessionUUID string
func (_e *MockInterface_Expecter) GetSurveySession(surveyUUID interface{}, sessionUUID interface{}) *MockInterface_GetSurveySession_Call {
	return &MockInterface_GetSurveySession_Call{Call: _e.mock.On("GetSurveySession", surveyUUID, sessionUUID)}
}

func (_c *MockInterface_GetSurveySession_Call) Run(run func(surveyUUID string, sessionUUID string)) *MockInterface_GetSurveySession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_GetSurveySession_Call) Return(surveySession *types.SurveySession, err error) *MockInterface_GetSurveySession_Call {
	_c.Call.Return(surveySession, err)
	return _c
}

func (_c *MockInterface_GetSurveySession_Call) RunAndReturn(run func(surveyUUID string, sessionUUID string) (*types.SurveySession, error)) *MockInterface_GetSurveySession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSurveySessionAnswers provides a mock function for the type MockInterface
func (_mock *MockInterface) GetSurveySessionAnswers(sessionUUID string) ([]types.QuestionAnswer, error) {
	ret := _mock.Called(sessionUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySessionAnswers")
	}

	var r0 []types.QuestionAnswer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]types.QuestionAnswer, error)); ok {
		return returnFunc(sessionUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []types.QuestionAnswer); ok {
		r0 = returnFunc(sessionUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.QuestionAnswer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(sessionUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_GetSurveySessionAnswers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSurveySessionAnswers'
type MockInterface_GetSurveySessionAnswers_Call struct {
	*mock.Call
}

// GetSurveySessionAnswers is a helper method to define mock.On call
//   - sessionUUID string
func (_e *MockInterface_Expecter) GetSurveySessionAnswers(sessionUUID interface{}) *MockInterface_GetSurveySessionAnswers_Call {
	return &MockInterface_GetSurveySessionAnswers_Call{Call: _e.mock.On("GetSurveySessionAnswers", sessionUUID)}
}

func (_c *MockInterface_GetSurveySessionAnswers_Call) Run(run func(sessionUUID string)) *MockInterface_GetSurveySessionAnswers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_GetSurveySessionAnswers_Call) Return(questionAnswers []types.QuestionAnswer, err error) *MockInterface_GetSurveySessionAnswers_Call {
	_c.Call.Return(questionAnswers, err)
	return _c
}

func (_c *MockInterface_GetSurveySessionAnswers_Call) RunAndReturn(run func(sessionUUID string) ([]types.QuestionAnswer, error)) *MockInterface_GetSurveySessionAnswers_Call {
	_c.Call.Return(run)
	return _c
}

// GetSurveySessionByIPAddress provides a mock function for the type MockInterface
func (_mock *MockInterface) GetSurveySessionByIPAddress(surveyUUID string, ipAddr string) (*types.SurveySession, error) {
	ret := _mock.Called(surveyUUID, ipAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySessionByIPAddress")
	}

	var r0 *types.SurveySession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*types.SurveySession, error)); ok {
		return returnFunc(surveyUUID, ipAddr)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *types.SurveySession); ok {
		r0 = returnFunc(surveyUUID, ipAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SurveySession)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(surveyUUID, ipAddr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_GetSurveySessionByIPAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSurveySessionByIPAddress'
type MockInterface_GetSurveySessionByIPAddress_Call struct {
	*mock.Call
}

// GetSurveySessionByIPAddress is a helper method to define mock.On call
//   - surveyUUID string
//   - ipAddr string
func (_e *MockInterface_Expecter) GetSurveySessionByIPAddress(surveyUUID interface{}, ipAddr interface{}) *MockInterface_GetSurveySessionByIPAddress_Call {
	return &MockInterface_GetSurveySessionByIPAddress_Call{Call: _e.mock.On("GetSurveySessionByIPAddress", surveyUUID, ipAddr)}
}

func (_c *MockInterface_GetSurveySessionByIPAddress_Call) Run(run func(surveyUUID string, ipAddr string)) *MockInterface_GetSurveySessionByIPAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_GetSurveySessionByIPAddress_Call) Return(surveySession *types.SurveySession, err error) *MockInterface_GetSurveySessionByIPAddress_Call {
	_c.Call.Return(surveySession, err)
	return _c
}

func (_c *MockInterface_GetSurveySessionByIPAddress_Call) RunAndReturn(run func(surveyUUID string, ipAddr string) (*types.SurveySession, error)) *MockInterface_GetSurveySessionByIPAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetSurveySessionsWithAnswers provides a mock function for the type MockInterface
func (_mock *MockInterface) GetSurveySessionsWithAnswers(surveyUUID string, filter *types.SurveySessionsFilter) ([]types.SurveySession, int, error) {
	ret := _mock.Called(surveyUUID, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveySessionsWithAnswers")
	}

	var r0 []types.SurveySession
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, *types.SurveySessionsFilter) ([]types.SurveySession, int, error)); ok {
		return returnFunc(surveyUUID, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *types.SurveySessionsFilter) []types.SurveySession); ok {
		r0 = returnFunc(surveyUUID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SurveySession)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *types.SurveySessionsFilter) int); ok {
		r1 = returnFunc(surveyUUID, filter)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(string, *types.SurveySessionsFilter) error); ok {
		r2 = returnFunc(surveyUUID, filter)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockInterface_GetSurveySessionsWithAnswers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSurveySessionsWithAnswers'
type MockInterface_GetSurveySessionsWithAnswers_Call struct {
	*mock.Call
}

// GetSurveySessionsWithAnswers is a helper method to define mock.On call
//   - surveyUUID string
//   - filter *types.SurveySessionsFilter
func (_e *MockInterface_Expecter) GetSurveySessionsWithAnswers(surveyUUID interface{}, filter interface{}) *MockInterface_GetSurveySessionsWithAnswers_Call {
	return &MockInterface_GetSurveySessionsWithAnswers_Call{Call: _e.mock.On("GetSurveySessionsWithAnswers", surveyUUID, filter)}
}

func (_c *MockInterface_GetSurveySessionsWithAnswers_Call) Run(run func(surveyUUID string, filter *types.SurveySessionsFilter)) *MockInterface_GetSurveySessionsWithAnswers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *types.SurveySessionsFilter
		if args[1] != nil {
			arg1 = args[1].(*types.SurveySessionsFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_GetSurveySessionsWithAnswers_Call) Return(surveySessions []types.SurveySession, n int, err error) *MockInterface_GetSurveySessionsWithAnswers_Call {
	_c.Call.Return(surveySessions, n, err)
	return _c
}

func (_c *MockInterface_GetSurveySessionsWithAnswers_Call) RunAndReturn(run func(surveyUUID string, filter *types.SurveySessionsFilter) ([]types.SurveySession, int, error)) *MockInterface_GetSurveySessionsWithAnswers_Call {
	_c.Call.Return(run)
	return _c
}

// GetSurveys provides a mock function for the type MockInterface
func (_mock *MockInterface) GetSurveys() ([]*types.Survey, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSurveys")
	}

	var r0 []*types.Survey
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*types.Survey, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*types.Survey); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Survey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_GetSurveys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSurveys'
type MockInterface_GetSurveys_Call struct {
	*mock.Call
}

// GetSurveys is a helper method to define mock.On call
func (_e *MockInterface_Expecter) GetSurveys() *MockInterface_GetSurveys_Call {
	return &MockInterface_GetSurveys_Call{Call: _e.mock.On("GetSurveys")}
}

func (_c *MockInterface_GetSurveys_Call) Run(run func()) *MockInterface_GetSurveys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_GetSurveys_Call) Return(surveys []*types.Survey, err error) *MockInterface_GetSurveys_Call {
	_c.Call.Return(surveys, err)
	return _c
}

func (_c *MockInterface_GetSurveys_Call) RunAndReturn(run func() ([]*types.Survey, error)) *MockInterface_GetSurveys_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockInterface
func (_mock *MockInterface) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockInterface_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Init() *MockInterface_Init_Call {
	return &MockInterface_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockInterface_Init_Call) Run(run func()) *MockInterface_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Init_Call) Return(err error) *MockInterface_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_Init_Call) RunAndReturn(run func() error) *MockInterface_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function for the type MockInterface
func (_mock *MockInterface) Migrate() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockInterface_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Migrate() *MockInterface_Migrate_Call {
	return &MockInterface_Migrate_Call{Call: _e.mock.On("Migrate")}
}

func (_c *MockInterface_Migrate_Call) Run(run func()) *MockInterface_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Migrate_Call) Return(err error) *MockInterface_Migrate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_Migrate_Call) RunAndReturn(run func() error) *MockInterface_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockInterface
func (_mock *MockInterface) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockInterface_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Ping() *MockInterface_Ping_Call {
	return &MockInterface_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockInterface_Ping_Call) Run(run func()) *MockInterface_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Ping_Call) Return(err error) *MockInterface_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_Ping_Call) RunAndReturn(run func() error) *MockInterface_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// StoreWebhookResponse provides a mock function for the type MockInterface
func (_mock *MockInterface) StoreWebhookResponse(sessionId int, responseStatus int, response string) error {
	ret := _mock.Called(sessionId, responseStatus, response)

	if len(ret) == 0 {
		panic("no return value specified for StoreWebhookResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, int, string) error); ok {
		r0 = returnFunc(sessionId, responseStatus, response)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_StoreWebhookResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreWebhookResponse'
type MockInterface_StoreWebhookResponse_Call struct {
	*mock.Call
}

// StoreWebhookResponse is a helper method to define mock.On call
//   - sessionId int
//   - responseStatus int
//   - response string
func (_e *MockInterface_Expecter) StoreWebhookResponse(sessionId interface{}, responseStatus interface{}, response interface{}) *MockInterface_StoreWebhookResponse_Call {
	return &MockInterface_StoreWebhookResponse_Call{Call: _e.mock.On("StoreWebhookResponse", sessionId, responseStatus, response)}
}

func (_c *MockInterface_StoreWebhookResponse_Call) Run(run func(sessionId int, responseStatus int, response string)) *MockInterface_StoreWebhookResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockInterface_StoreWebhookResponse_Call) Return(err error) *MockInterface_StoreWebhookResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_StoreWebhookResponse_Call) RunAndReturn(run func(sessionId int, responseStatus int, response string) error) *MockInterface_StoreWebhookResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSurvey provides a mock function for the type MockInterface
func (_mock *MockInterface) UpdateSurvey(survey *types.Survey) error {
	ret := _mock.Called(survey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSurvey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Survey) error); ok {
		r0 = returnFunc(survey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_UpdateSurvey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSurvey'
type MockInterface_UpdateSurvey_Call struct {
	*mock.Call
}

// UpdateSurvey is a helper method to define mock.On call
//   - survey *types.Survey
func (_e *MockInterface_Expecter) UpdateSurvey(survey interface{}) *MockInterface_UpdateSurvey_Call {
	return &MockInterface_UpdateSurvey_Call{Call: _e.mock.On("UpdateSurvey", survey)}
}

func (_c *MockInterface_UpdateSurvey_Call) Run(run func(survey *types.Survey)) *MockInterface_UpdateSurvey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Survey
		if args[0] != nil {
			arg0 = args[0].(*types.Survey)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_UpdateSurvey_Call) Return(err error) *MockInterface_UpdateSurvey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_UpdateSurvey_Call) RunAndReturn(run func(survey *types.Survey) error) *MockInterface_UpdateSurvey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSurveySessionStatus provides a mock function for the type MockInterface
func (_mock *MockInterface) UpdateSurveySessionStatus(sessionUUID string, newStatus types.SurveySessionStatus) error {
	ret := _mock.Called(sessionUUID, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSurveySessionStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, types.SurveySessionStatus) error); ok {
		r0 = returnFunc(sessionUUID, newStatus)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_UpdateSurveySessionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSurveySessionStatus'
type MockInterface_UpdateSurveySessionStatus_Call struct {
	*mock.Call
}

// UpdateSurveySessionStatus is a helper method to define mock.On call
//   - sessionUUID string
//   - newStatus types.SurveySessionStatus
func (_e *MockInterface_Expecter) UpdateSurveySessionStatus(sessionUUID interface{}, newStatus interface{}) *MockInterface_UpdateSurveySessionStatus_Call {
	return &MockInterface_UpdateSurveySessionStatus_Call{Call: _e.mock.On("UpdateSurveySessionStatus", sessionUUID, newStatus)}
}

func (_c *MockInterface_UpdateSurveySessionStatus_Call) Run(run func(sessionUUID string, newStatus types.SurveySessionStatus)) *MockInterface_UpdateSurveySessionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 types.SurveySessionStatus
		if args[1] != nil {
			arg1 = args[1].(types.SurveySessionStatus)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_UpdateSurveySessionStatus_Call) Return(err error) *MockInterface_UpdateSurveySessionStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_UpdateSurveySessionStatus_Call) RunAndReturn(run func(sessionUUID string, newStatus types.SurveySessionStatus) error) *MockInterface_UpdateSurveySessionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertSurveyQuestionAnswer provides a mock function for the type MockInterface
func (_mock *MockInterface) UpsertSurveyQuestionAnswer(sessionUUID string, questionUUID string, answer types.Answer) error {
	ret := _mock.Called(sessionUUID, questionUUID, answer)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSurveyQuestionAnswer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, types.Answer) error); ok {
		r0 = returnFunc(sessionUUID, questionUUID, answer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_UpsertSurveyQuestionAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertSurveyQuestionAnswer'
type MockInterface_UpsertSurveyQuestionAnswer_Call struct {
	*mock.Call
}

// UpsertSurveyQuestionAnswer is a helper method to define mock.On call
//   - sessionUUID string
//   - questionUUID string
//   - answer types.Answer
func (_e *MockInterface_Expecter) UpsertSurveyQuestionAnswer(sessionUUID interface{}, questionUUID interface{}, answer interface{}) *MockInterface_UpsertSurveyQuestionAnswer_Call {
	return &MockInterface_UpsertSurveyQuestionAnswer_Call{Call: _e.mock.On("UpsertSurveyQuestionAnswer", sessionUUID, questionUUID, answer)}
}

func (_c *MockInterface_UpsertSurveyQuestionAnswer_Call) Run(run func(sessionUUID string, questionUUID string, answer types.Answer)) *MockInterface_UpsertSurveyQuestionAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 types.Answer
		if args[2] != nil {
			arg2 = args[2].(types.Answer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockInterface_UpsertSurveyQuestionAnswer_Call) Return(err error) *MockInterface_UpsertSurveyQuestionAnswer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_UpsertSurveyQuestionAnswer_Call) RunAndReturn(run func(sessionUUID string, questionUUID string, answer types.Answer) error) *MockInterface_UpsertSurveyQuestionAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertSurveyQuestions provides a mock function for the type MockInterface
func (_mock *MockInterface) UpsertSurveyQuestions(survey *types.Survey) error {
	ret := _mock.Called(survey)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSurveyQuestions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Survey) error); ok {
		r0 = returnFunc(survey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInterface_UpsertSurveyQuestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertSurveyQuestions'
type MockInterface_UpsertSurveyQuestions_Call struct {
	*mock.Call
}

// UpsertSurveyQuestions is a helper method to define mock.On call
//   - survey *types.Survey
func (_e *MockInterface_Expecter) UpsertSurveyQuestions(survey interface{}) *MockInterface_UpsertSurveyQuestions_Call {
	return &MockInterface_UpsertSurveyQuestions_Call{Call: _e.mock.On("UpsertSurveyQuestions", survey)}
}

func (_c *MockInterface_UpsertSurveyQuestions_Call) Run(run func(survey *types.Survey)) *MockInterface_UpsertSurveyQuestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Survey
		if args[0] != nil {
			arg0 = args[0].(*types.Survey)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_UpsertSurveyQuestions_Call) Return(err error) *MockInterface_UpsertSurveyQuestions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInterface_UpsertSurveyQuestions_Call) RunAndReturn(run func(survey *types.Survey) error) *MockInterface_UpsertSurveyQuestions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileInterface creates a new instance of MockFileInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileInterface {
	mock := &MockFileInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileInterface is an autogenerated mock type for the FileInterface type
type MockFileInterface struct {
	mock.Mock
}

type MockFileInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileInterface) EXPECT() *MockFileInterface_Expecter {
	return &MockFileInterface_Expecter{mock: &_m.Mock}
}

// Init provides a mock function for the type MockFileInterface
func (_mock *MockFileInterface) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileInterface_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockFileInterface_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockFileInterface_Expecter) Init() *MockFileInterface_Init_Call {
	return &MockFileInterface_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockFileInterface_Init_Call) Run(run func()) *MockFileInterface_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFileInterface_Init_Call) Return(err error) *MockFileInterface_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileInterface_Init_Call) RunAndReturn(run func() error) *MockFileInterface_Init_Call {
	_c.Call.Return(run)
	return _c
}

// IsFileExist provides a mock function for the type MockFileInterface
func (_mock *MockFileInterface) IsFileExist(fileName string) (bool, string, error) {
	ret := _mock.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for IsFileExist")
	}

	var r0 bool
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, string, error)); ok {
		return returnFunc(fileName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(fileName)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(fileName)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFileInterface_IsFileExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFileExist'
type MockFileInterface_IsFileExist_Call struct {
	*mock.Call
}

// IsFileExist is a helper method to define mock.On call
//   - fileName string
func (_e *MockFileInterface_Expecter) IsFileExist(fileName interface{}) *MockFileInterface_IsFileExist_Call {
	return &MockFileInterface_IsFileExist_Call{Call: _e.mock.On("IsFileExist", fileName)}
}

func (_c *MockFileInterface_IsFileExist_Call) Run(run func(fileName string)) *MockFileInterface_IsFileExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileInterface_IsFileExist_Call) Return(b bool, s string, err error) *MockFileInterface_IsFileExist_Call {
	_c.Call.Return(b, s, err)
	return _c
}

func (_c *MockFileInterface_IsFileExist_Call) RunAndReturn(run func(fileName string) (bool, string, error)) *MockFileInterface_IsFileExist_Call {
	_c.Call.Return(run)
	return _c
}

// SaveFile provides a mock function for the type MockFileInterface
func (_mock *MockFileInterface) SaveFile(file *types.File) (string, error) {
	ret := _mock.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*types.File) (string, error)); ok {
		return returnFunc(file)
	}
	if returnFunc, ok := ret.Get(0).(func(*types.File) string); ok {
		r0 = returnFunc(file)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*types.File) error); ok {
		r1 = returnFunc(file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileInterface_SaveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFile'
type MockFileInterface_SaveFile_Call struct {
	*mock.Call
}

// SaveFile is a helper method to define mock.On call
//   - file *types.File
func (_e *MockFileInterface_Expecter) SaveFile(file interface{}) *MockFileInterface_SaveFile_Call {
	return &MockFileInterface_SaveFile_Call{Call: _e.mock.On("SaveFile", file)}
}

func (_c *MockFileInterface_SaveFile_Call) Run(run func(file *types.File)) *MockFileInterface_SaveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.File
		if args[0] != nil {
			arg0 = args[0].(*types.File)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileInterface_SaveFile_Call) Return(s string, err error) *MockFileInterface_SaveFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileInterface_SaveFile_Call) RunAndReturn(run func(file *types.File) (string, error)) *MockFileInterface_SaveFile_Call {
	_c.Call.Return(run)
	return _c
}
