// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CommonStatuses string

const (
	CommonStatusesActive   CommonStatuses = "active"
	CommonStatusesInactive CommonStatuses = "inactive"
)

func (e *CommonStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CommonStatuses(s)
	case string:
		*e = CommonStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for CommonStatuses: %T", src)
	}
	return nil
}

type NullCommonStatuses struct {
	CommonStatuses CommonStatuses
	Valid          bool // Valid is true if CommonStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCommonStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.CommonStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CommonStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCommonStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CommonStatuses), nil
}

type SurveyDeliveryStatuses string

const (
	SurveyDeliveryStatusesLaunched SurveyDeliveryStatuses = "launched"
	SurveyDeliveryStatusesStopped  SurveyDeliveryStatuses = "stopped"
)

func (e *SurveyDeliveryStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SurveyDeliveryStatuses(s)
	case string:
		*e = SurveyDeliveryStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for SurveyDeliveryStatuses: %T", src)
	}
	return nil
}

type NullSurveyDeliveryStatuses struct {
	SurveyDeliveryStatuses SurveyDeliveryStatuses
	Valid                  bool // Valid is true if SurveyDeliveryStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSurveyDeliveryStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.SurveyDeliveryStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SurveyDeliveryStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSurveyDeliveryStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SurveyDeliveryStatuses), nil
}

type SurveyParseStatuses string

const (
	SurveyParseStatusesSuccess SurveyParseStatuses = "success"
	SurveyParseStatusesError   SurveyParseStatuses = "error"
	SurveyParseStatusesDeleted SurveyParseStatuses = "deleted"
)

func (e *SurveyParseStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SurveyParseStatuses(s)
	case string:
		*e = SurveyParseStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for SurveyParseStatuses: %T", src)
	}
	return nil
}

type NullSurveyParseStatuses struct {
	SurveyParseStatuses SurveyParseStatuses
	Valid               bool // Valid is true if SurveyParseStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSurveyParseStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.SurveyParseStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SurveyParseStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSurveyParseStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SurveyParseStatuses), nil
}

type SurveysSessionsStatus string

const (
	SurveysSessionsStatusInProgress SurveysSessionsStatus = "in_progress"
	SurveysSessionsStatusCompleted  SurveysSessionsStatus = "completed"
)

func (e *SurveysSessionsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SurveysSessionsStatus(s)
	case string:
		*e = SurveysSessionsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SurveysSessionsStatus: %T", src)
	}
	return nil
}

type NullSurveysSessionsStatus struct {
	SurveysSessionsStatus SurveysSessionsStatus
	Valid                 bool // Valid is true if SurveysSessionsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSurveysSessionsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SurveysSessionsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SurveysSessionsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSurveysSessionsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SurveysSessionsStatus), nil
}

type Survey struct {
	ID             int32
	Uuid           pgtype.UUID
	CreatedAt      pgtype.Timestamp
	ParseStatus    NullSurveyParseStatuses
	DeliveryStatus NullSurveyDeliveryStatuses
	ErrorLog       pgtype.Text
	Name           string
	UrlSlug        string
	Config         []byte
}

type SurveysAnswer struct {
	ID         int32
	Uuid       pgtype.UUID
	CreatedAt  pgtype.Timestamp
	SessionID  int32
	QuestionID int32
	Answer     []byte
}

type SurveysQuestion struct {
	ID         int32
	Uuid       pgtype.UUID
	SurveyID   int32
	QuestionID string
}

type SurveysSession struct {
	ID          int32
	Uuid        pgtype.UUID
	CreatedAt   pgtype.Timestamp
	CompletedAt pgtype.Timestamp
	Status      NullSurveysSessionsStatus
	SurveyID    int32
	IpAddr      pgtype.Text
}

type SurveysWebhookResponse struct {
	ID             int32
	CreatedAt      pgtype.Timestamp
	SessionID      int32
	ResponseStatus int32
	Response       pgtype.Text
}
